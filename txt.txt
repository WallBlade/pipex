# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    txt.txt                                            :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: zel-kass <zel-kass@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2022/10/31 16:30:33 by zel-kass          #+#    #+#              #
#    Updated: 2022/11/16 15:25:22 by zel-kass         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

int	id;
	int	n;
	int	x = 10;

	id = fork();
	while (env[i])
	{
		if (PATHS )
		{
			split = {"/mnt/nfs/homes/zel-kass/bin" "/mnt/nfs/homes/zel-kass/bin" "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"}
			while (split[i])
			{
				if (access("/mnt/nfs/homes/zel-kass/bin/ls"))
					good path = split[i];
			}
			if !good_path = COMMAND NOT FOUND;
		}
	}

	dup2(infile, 0);
	
	if (id == 0)
	{
		options = {"echo", "-n", "salut"}
		access("/bin/ls");
		execve("/bin/echo", option);
		exit(1)
	}
	(void)argc;
	(void)argv;
	if (id == 0)
		x = 15;
	else
		n = 6;
	if (id != 0)
		sleep(1);
	for (int i = n; i < n + 5; i++)
		printf("%d\n", i);
	return (0);

//////////////////////////////////////////////////////////////////////

	int pid = fork();
	if (pid == 0)
	{
		printf("I am child, my pid inside the fork is = %d\n", pid);
		printf("I am child, my absolute pid is = %d\n", getpid());
		printf("I am child, the pid of my parent = %d\n", getppid());
	}
	else if (pid != 0)
	{
		wait(NULL);
		printf("\npid = %d\n", pid);
		printf("I am parent, my pid is = %d\n", getpid());
	}

		while (cmds)
	{
		pid = fork();
		if (pid == 0)
			execve(cmds->abs_path, cmds->options, envp);
		else
			cmds = cmds->next;
	}

	int fd[2];
	
	if (pipe(fd) == -1)
		return (1);
	int pid = fork();
	if (pid < 0)
		return (2);
	if (pid == 0)
		execve(cmds->abs_path, cmds->options, envp);
	waitpid(pid, NULL, 0);

	////////////////////////////////////////////////////

	if (pipe(data.fd) == -1)
		return (1);
	int	pid1 = fork();
	if (pid1 < 0)
		return (2);
	if (pid1 == 0)
	{
		
		dup2(data.fd[1], STDOUT_FILENO);
		close(data.fd[0]);
		close(data.fd[1]);
		execve(cmds->abs_path, cmds->options, envp);
	}
	int pid2 = fork();
	if (pid2 < 0)
		return (3);
	if (pid2 == 0)
	{
		
		dup2(data.fd[0], STDIN_FILENO);
		close(data.fd[0]);
		close(data.fd[1]);
		execve(cmds->next->abs_path, cmds->next->options, envp);
	}
	close(data.fd[0]);
	close(data.fd[1]);
	waitpid(pid1, &status, 0);
	waitpid(pid2, &status, 0);

	\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

	void	exec(t_data *data, t_pip *pip, char **envp)
{
	pid_t	pid1;
	pid_t	pid2;

	if (pipe(data->fd) == -1)
		return ;
	pid1 = fork();
	if (pid1 < 0)
		return ;
	else if (pid1 == 0)
		first_child(data, pip, envp);
	pid2 = fork();
	if (pid2 < 0)
		return ;
	else if (pid2 == 0)
		second_son(data, pip, envp);
	close(data->fd[0]);
	close(data->fd[1]);
	waitpid(pid1, NULL, 0);
	waitpid(pid2, NULL, 0);
}